version: '3.8'

services:
  # MariaDB Database
  database:
    image: mariadb:11
    container_name: crypto_exchange_db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: crypto_exchange
      MYSQL_USER: exchange_user
      MYSQL_PASSWORD: exchange_password
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - crypto_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend Go API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: crypto_exchange_backend
    environment:
      - DB_HOST=database
      - DB_PORT=3306
      - DB_USER=exchange_user
      - DB_PASSWORD=exchange_password
      - DB_NAME=crypto_exchange
      - GIN_MODE=release
      - PORT=8080
      - LOG_LEVEL=info
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - crypto_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App (Caddy)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://45.12.111.208:8080/api/v1
    container_name: crypto_exchange_frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - crypto_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Adminer for database management
  adminer:
    image: adminer:4.8.1
    container_name: crypto_exchange_adminer
    ports:
      - "8081:8080"
    networks:
      - crypto_network
    restart: unless-stopped

volumes:
  db_data:

networks:
  crypto_network:
    driver: bridge